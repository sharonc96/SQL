

-- Query all columns for all American cities in the CITY table with populations larger than 100000.
SELECT * FROM CITY 
WHERE population > 100000
AND countrycode = 'USA';

-- Query the NAME field for all American cities in the CITY table with populations larger than 120000.
Select Name from City 
Where population > 120000
AND countrycode = 'USA';

-- Query all columns for a city in CITY with the ID 1661.
SELECT * FROM City 
WHere ID = '1661';

-- Query a list of CITY names from STATION for cities that have an even ID number. 
SELECT  DISTINCT CITY FROM STATION 
WHERE mod(id, 2) = 0;

-- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT COUNT(city) - COUNT( DISTINCT(city) ) FROM station;

-- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths.
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1; 
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC, CITY LIMIT 1;

-- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION.
SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE 'A%'
OR CITY LIKE 'E%'
OR CITY LIKE 'I%'
OR CITY LIKE 'O%'
OR CITY LIKE 'U%';

-- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT CITY FROM STATION WHERE (CITY REGEXP '^[aeiou]') AND (CITY REGEXP '[aeiou]$');

-- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION WHERE NOT (CITY REGEXP '^[aeiou]');

-- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION WHERE NOT (CITY REGEXP '[aeiou]$');

-- Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. Secondary sort them by ascending ID.
SELECT NAME FROM STUDENTS
WHERE MARKS > 75
ORDER BY RIGHT(NAME, 3) ASC, ID ASC

-- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. 
SELECT CASE 
WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle' 
WHEN A = B AND B = C THEN 'Equilateral' 
WHEN A = B OR A = C OR B = C THEN 'Isosceles' 
ELSE 'Scalene' 
END AS triangles_type 
FROM TRIANGLES;
